{
  "nodes": [
    {
      "parameters": {},
      "id": "490da500-7c86-42ee-9c9e-27b649c0aecb",
      "name": "When clicking ‚ÄòTest workflow‚Äô",
      "type": "n8n-nodes-base.manualTrigger",
      "position": [
        -920,
        880
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "url": "=https://trustpilot.com/review/{{ $json.company_id }}",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "sort",
              "value": "recency"
            }
          ]
        },
        "options": {
          "pagination": {
            "pagination": {
              "parameters": {
                "parameters": [
                  {
                    "name": "page",
                    "value": "={{ $pageCount + 1 }}"
                  }
                ]
              },
              "paginationCompleteWhen": "receiveSpecificStatusCodes",
              "statusCodesWhenComplete": "404",
              "limitPagesFetched": true,
              "maxRequests": "={{ $json.max_page }}",
              "requestInterval": 5000
            }
          }
        }
      },
      "id": "49d34e86-d4ee-464d-b8ae-fd8569027db8",
      "name": "Get reviews1",
      "type": "n8n-nodes-base.httpRequest",
      "position": [
        -220,
        740
      ],
      "typeVersion": 4.2
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "556e201d-242a-4c0e-bc13-787c2b60f800",
              "name": "company_id",
              "type": "string",
              "value": "microsoft.com"
            },
            {
              "id": "a1f239df-df08-41d8-8b78-d6502266a581",
              "name": "max_page",
              "type": "number",
              "value": 1
            }
          ]
        },
        "options": {}
      },
      "id": "d9b8e785-aa51-417a-ada3-3255c30e6bc1",
      "name": "Global1",
      "type": "n8n-nodes-base.set",
      "position": [
        -480,
        740
      ],
      "typeVersion": 3.4
    },
    {
      "parameters": {
        "jsCode": "async function getReviewsFromPage(content) {\n    try {\n        const scriptTagStart = content.indexOf('<script id=\"__NEXT_DATA__\" type=\"application/json\">');\n        const scriptTagEnd = content.indexOf('</script>', scriptTagStart);\n\n        if (scriptTagStart === -1 || scriptTagEnd === -1) {\n            console.warn(\"Could not find <script> with review data.\");\n            return [];\n        }\n\n        const jsonDataString = content.substring(\n            scriptTagStart + '<script id=\"__NEXT_DATA__\" type=\"application/json\">'.length,\n            scriptTagEnd\n        );\n\n        const reviewsRaw = JSON.parse(jsonDataString);\n        return reviewsRaw.props?.pageProps?.reviews || [];\n    } catch (error) {\n        console.error(`Error parsing reviews: ${error.message}`);\n        return [];\n    }\n}\n\nasync function scrapeTrustpilotReviews() {\n    let reviewsData = [];\n    const maxReviews = 3;\n\n    for (let page = 0; page < $input.all().length; page++) {\n        console.log(`Scraping page ${page + 1}...`);\n        const content = $input.all()[page].json.data;\n        const reviews = await getReviewsFromPage(content);\n\n        if (!reviews.length) {\n            console.log(\"No more reviews found.\");\n            break;\n        }\n\n        console.log(`Found ${reviews.length} reviews on page ${page + 1}`);\n        for (const review of reviews) {\n            if (reviewsData.length >= maxReviews) break;\n\n            reviewsData.push({\n                Date: new Date(review.dates.publishedDate).toISOString().split('T')[0],\n                Author: review.consumer?.displayName,\n                Body: review.text,\n                Heading: review.title,\n                Rating: review.rating,\n                Location: review.consumer?.countryCode\n            });\n        }\n\n        if (reviewsData.length >= maxReviews) break;\n    }\n\n    return reviewsData;\n}\n\nconst reviews = await scrapeTrustpilotReviews();\n\nreturn [\n  {\n    json: {\n      reviews: reviews\n    }\n  }\n];\n"
      },
      "id": "715704f5-8bb0-4632-b701-5d80da429da6",
      "name": "Parse reviews1",
      "type": "n8n-nodes-base.code",
      "position": [
        0,
        740
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "fieldToSplitOut": "reviews",
        "options": {}
      },
      "id": "9f52dc86-83aa-4318-a469-57ae344a682a",
      "name": "Split Out1",
      "type": "n8n-nodes-base.splitOut",
      "position": [
        220,
        740
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {}
          ]
        }
      },
      "id": "70cc96df-a405-4581-b7c6-62496886b8db",
      "name": "Schedule Trigger1",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -820,
        640
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "trigger-reviews",
        "options": {}
      },
      "id": "938ce03e-e882-49ec-ab66-3e6fec67751e",
      "name": "Webhook Trigger1",
      "type": "n8n-nodes-base.webhook",
      "position": [
        -820,
        1100
      ],
      "typeVersion": 1,
      "webhookId": "e9b4a304-5b3d-4d76-9965-85212bf5b331"
    },
    {
      "parameters": {
        "content": "### üí° Webhook Configuration\n\n**HTTP Method:** `POST`  \n**Path:** `/trigger-reviews`  \n**Expected Payload (JSON):**\n\n\n\n\n```json\n{\n  \"company_id\": \"notion.so\",\n  \"max_page\": 50\n}\n```\n\n> üì• This webhook will trigger your review scraping workflow in real-time whenever it's hit with the above payload.\n",
        "height": 380,
        "width": 460
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1120,
        1080
      ],
      "typeVersion": 1,
      "id": "9361c770-e41b-4bf3-85ae-255e7ed45973",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "operation": "create",
        "base": {
          "__rl": true,
          "value": "appfh931GtHE5t7e4",
          "mode": "list",
          "cachedResultName": "n8n compi",
          "cachedResultUrl": "https://airtable.com/appfh931GtHE5t7e4"
        },
        "table": {
          "__rl": true,
          "value": "tblWsYBzqWWWkXfPA",
          "mode": "list",
          "cachedResultName": "Table 2",
          "cachedResultUrl": "https://airtable.com/appfh931GtHE5t7e4/tblWsYBzqWWWkXfPA"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "summary": "={{$json.output.summary}}",
            "sentiment": "={{ $json.output.sentiment }}",
            "themes": "={{ $json.output.themes.join(', ') }}",
            "insights": "={{ $json.output.insights }}",
            "keywords": "={{ $json.output.keywords.join(', ') }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "summary",
              "displayName": "summary",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "sentiment",
              "displayName": "sentiment",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "themes",
              "displayName": "themes",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "insights",
              "displayName": "insights",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            },
            {
              "id": "keywords",
              "displayName": "keywords",
              "required": false,
              "defaultMatch": false,
              "canBeUsedToMatch": true,
              "display": true,
              "type": "string",
              "readOnly": false,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.airtable",
      "typeVersion": 2.1,
      "position": [
        860,
        620
      ],
      "id": "721a1c8a-30e8-4e27-acaa-d4d846726d6e",
      "name": "Airtable1"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an AI assistant analyzing customer reviews. \nYour task is to extract structured insights from the given review JSON.\nReturn a JSON object with:\n- summary (short summary of the review body)\n- sentiment (üòÑ, üòê, üò¢)\n- themes (array of topics like support, delivery, etc.)\n- insights (observations or implications)\n- keywords (array of important terms)\n\nReview:\nDate: {{$json.Date}}\nAuthor: {{$json.Author}}\nRating: {{$json.Rating}}\nLocation: {{$json.Location}}\nHeading: {{$json.Heading}}\nBody: {{$json.Body}}",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        460,
        800
      ],
      "id": "83da25fe-5ee4-4ea0-8873-f13302019506",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"summary\": { \"type\": \"string\" },\n    \"sentiment\": { \"type\": \"string\", \"enum\": [\"üòÑ\", \"üòê\", \"üò¢\"] },\n    \"themes\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"insights\": { \"type\": \"string\" },\n    \"keywords\": { \"type\": \"array\", \"items\": { \"type\": \"string\" } }\n  }\n}"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        680,
        1000
      ],
      "id": "3a08f3db-f5f9-4fc6-8bf2-354c29af2dd1",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "authentication": "oAuth2",
        "select": "user",
        "user": {
          "__rl": true,
          "value": "U01AW1D6CQ1",
          "mode": "list",
          "cachedResultName": "chaitanyajha.quantum"
        },
        "text": "Some reviews got updated! Go check it out on https://airtable.com/appfh931GtHE5t7e4/shrbNOpFE1dXCogDO ",
        "otherOptions": {}
      },
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2.3,
      "position": [
        1080,
        620
      ],
      "id": "03eec700-4992-4ed7-8b33-792d989b9fd2",
      "name": "Slack",
      "webhookId": "a28655ca-bcef-4743-96c3-2a545030a9a7"
    },
    {
      "parameters": {
        "content": "### ‚è∞ Schedule Trigger Configuration\n\nThis workflow uses an **n8n Schedule Trigger** to run at predefined intervals.\n\n**Node Name:** `Schedule Trigger1`  \n**Node Type:** `n8n-nodes-base.scheduleTrigger`  \n**Version:** `1.2`\n\n**Trigger Configuration:**\n```json\n{\n  \"rule\": {\n    \"interval\": [\n      {}\n    ]\n  }\n}\n```\n\n> ‚öôÔ∏è This schedule is currently set with an empty interval configuration. You'll need to define when and how often the workflow should run (e.g., every hour, daily, weekly, etc.) in the trigger settings.\n",
        "height": 380,
        "width": 440
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1100,
        440
      ],
      "typeVersion": 1,
      "id": "610e3c74-e83c-4d91-9a89-5a22f1c75b6a",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## **What it does?**\n\nüîç **Scrape reviews of your competitors from Trustpilot**  \nü§ñ **Analyze each review using AI** to extract actionable insights  \nüìä **Store structured summaries in Airtable** as a live dashboard  \nüîó **[View Airtable Dashboard](https://airtable.com/appfh931GtHE5t7e4/shrNFmwFn1387VSAH)**  \nüí¨ **Automatically notify your team on Slack** as new reviews arrive  \n\n---\n\n### üì¶ **Review Analysis Output Format**\n```json\n{\n  \"summary\": \"...\",\n  \"sentiment\": \"positive | neutral | negative\",\n  \"themes\": [\"...\"],\n  \"insights\": [\"...\"],\n  \"keywords\": [\"...\", \"...\"]\n}\n```",
        "height": 520,
        "width": 820,
        "color": 6
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -280,
        60
      ],
      "typeVersion": 1,
      "id": "3e464a03-a8ce-4a68-b1ba-9555d72fced8",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "content": "#### ‚úÖ 1. **Use the Right Prompt Format**  \nYour custom prompt should **guide the model explicitly** and include examples to reduce hallucination.\n\n> üß† **Prompt template (good for OpenAI):**\n\n```text\nYou are an AI assistant analyzing customer reviews. \nYour task is to extract structured insights from the given review JSON.\nReturn a JSON object with:\n- summary (short summary of the review body)\n- sentiment (Happy, Neutral, Unhappy)\n- themes (array of topics like support, delivery, etc.)\n- insights (observations or implications)\n- keywords (array of important terms)\n\nReview:\nDate: {{$json.Date}}\nAuthor: {{$json.Author}}\nRating: {{$json.Rating}}\nLocation: {{$json.Location}}\nHeading: {{$json.Heading}}\nBody: {{$json.Body}}\n```\n\n> ‚ú® **Pro Tip:** Set temperature to 0.3 for more consistent structured results.",
        "height": 500,
        "width": 740
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        260,
        1160
      ],
      "typeVersion": 1,
      "id": "6f0551ed-c06a-420b-b976-a153fdc074ac",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "content": "#### ‚úÖ 4. **Send to Airtable**  \nUsing an Airtable node with mapped fields:\n- `Summary` ‚Üí `{{ $json[\"summary\"] }}`\n- `Sentiment` ‚Üí `{{ $json[\"sentiment\"] }}`\n- `Themes` ‚Üí `{{ $json[\"themes\"].join(\", \") }}`\n- `Insights` ‚Üí `{{ $json[\"insights\"].join(\", \") }}`\n- `Keywords` ‚Üí `{{ $json[\"keywords\"].join(\", \") }}`\n\n---\n\n### üß™ Example Output:\n\n```json\n{\n  \"summary\": \"The delivery was delayed, but the customer support team resolved the issue quickly.\",\n  \"sentiment\": \"üòÑ\",\n  \"themes\": [\"delivery\", \"support\", \"resolution time\"],\n  \"insights\": [\"Quick support can offset negative delivery experience\"],\n  \"keywords\": [\"delivery delay\", \"customer support\", \"fast resolution\"]\n}\n```",
        "height": 460,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        840,
        60
      ],
      "typeVersion": 1,
      "id": "5e2f3fcd-4f6e-406a-9e47-a8b6c9634ed7",
      "name": "Sticky Note6"
    },
    {
      "parameters": {
        "content": "## **Click here to run manually**\n",
        "height": 120,
        "width": 150,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1140,
        880
      ],
      "typeVersion": 1,
      "id": "74e78003-34f3-4dae-bbd8-cc9b55282131",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "content": "## HTTP Request (Trustpilot Scraper)\nFetches the Trustpilot page content, including embedded reviews data.\n",
        "height": 200,
        "width": 200,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -260,
        900
      ],
      "id": "f659e6b7-db68-4bce-8f36-0ff7763b9d49",
      "name": "Sticky Note7"
    },
    {
      "parameters": {
        "content": "## Split Out Reviews\nBreaks the list of reviews into individual items so each review can be processed separately.\n",
        "height": 180,
        "width": 190,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        160,
        900
      ],
      "id": "2949ee11-d504-42f2-b1a1-47c2d54c73ec",
      "name": "Sticky Note9"
    },
    {
      "parameters": {
        "content": "## **Slack message on database updation**\n",
        "height": 100,
        "width": 260,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        1040,
        800
      ],
      "typeVersion": 1,
      "id": "3b00bb56-7e74-40b5-8901-62233e1888a8",
      "name": "Sticky Note8"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4o-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        480,
        1020
      ],
      "id": "011c5561-8eb9-40f7-aaff-6c922729c5ac",
      "name": "OpenAI Chat Model"
    }
  ],
  "connections": {
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "Global1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get reviews1": {
      "main": [
        [
          {
            "node": "Parse reviews1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Global1": {
      "main": [
        [
          {
            "node": "Get reviews1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse reviews1": {
      "main": [
        [
          {
            "node": "Split Out1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out1": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger1": {
      "main": [
        [
          {
            "node": "Global1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger1": {
      "main": [
        [
          {
            "node": "Global1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Airtable1": {
      "main": [
        [
          {
            "node": "Slack",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Airtable1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "instanceId": "3c6bb3ec7a4742c334eba1d996705f153dacafcfdcfdf63ed57752308cb4d5bb"
  }
}
